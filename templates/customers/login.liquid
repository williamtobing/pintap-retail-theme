{{ 'customer.css' | asset_url | stylesheet_tag }}
{{ 'login-customer.css' | asset_url | stylesheet_tag }}

<div class="customer login otp-login-app" id="OTPLoginApp">
  {% section 'login-step-one' %}
  {% section 'login-step-two' %}
  {% section 'login-step-three' %}
  {% section 'login-step-four' %}
</div>

<script>
  if (document.querySelector("#OTPLoginApp")) {
    const OTPLoginApp = Vue.createApp({
      delimiters: [
        "${", "}"
      ],
      data() {
        return {
          URL: "https://dev-api-mretail.pintap.id",

          phone: null,
          email: null,
          password: null,

          numOne: null,
          numTwo: null,
          numThree: null,
          numFour: null,
          numFive: null,
          numSix: null,

          mismatchAuth: false,
          loading: false,

          typeOTP: "",
          directToReg: false,
          failOTP: false
        };
      },

      watch: {
        phone() {
          this.mismatchAuth = false;
        },
        password() {
          this.mismatchAuth = false;
        }
      },

      methods: {
        handleAuth() {
          if (this.phone.startsWith("0")) {
            this.phone = this.phone.replace("0", "+62");
          }

          axios
            .post(`${
              this.URL
            }/OAuth/token`, {
              phone: this.phone,
              password: this.password
            })
            .then((res) => {
              if (res.data.code === 404) {
                this.mismatchAuth = true;
              }

              if (res.data.code === 0) {
                axios
                  .get(`${
                    this.URL
                  }/api/v1/profile/email?phone=${
                    this.phone
                  }`)
                  .then((res) => {
                    if (res.data.code === 0) {
                      this.email = res
                        .data
                        .data
                        .email;
                    }
                    this.goToStepTwoFromOne();
                  })
                  .catch((err) => {
                    console.log(err);
                  });
              }
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleReqOtp(type) {
          console.log("Function request " + type + " OTP");
          this.typeOTP = type;

          if (this.phone.startsWith("0")) {
            this.phone = this.phone.replace("0", "+62");
          }

          axios
            .post(`${
              this.URL
            }/api/v1/auth/otp/send`, {
              phone: this.phone,
              channel: type
            })
            .then((res) => {
              if (res.data.code === 500) {
                this.directToReg = true;

                window.location = `${
                  window.location.origin
                }/account/register`;
              }
              if (res.data.code === 0) {
                this.goToStepThreeFromTwo();
              }
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleResendOtp() {
          console.log("soon!");
        },

        handleConfirmOtp() {
          const joinNum = [
            this.numOne,
            this.numTwo,
            this.numThree,
            this.numFour,
            this.numFive,
            this.numSix
          ].join("");

          axios
            .post(`${
              this.URL
            }/api/v1/auth/otp/confirm`, {
              phone: this.phone,
              otp: joinNum
            })
            .then((res) => {
              if (res.data.code === 401) {
                this.failOTP = true;
              }
              if (res.data.code === 0) {
                this.goToStepFourFromThree();
              }
            })
            .catch((err) => {
              this.failOTP = true;
              console.log(err);
            });
        },

        goToStepTwoFromOne() {
          const eStepOne = document.querySelector("#OTPStepOne");
          const eStepTwo = document.querySelector("#OTPStepTwo");
          if (eStepTwo.classList.contains("hidden")) {
            eStepOne.classList.add("hidden");
            eStepTwo.classList.remove("hidden");
            eStepTwo.classList.add("block");
          }
        },

        goToStepThreeFromTwo() {
          const eStepTwo = document.querySelector("#OTPStepTwo");
          const eStepThree = document.querySelector("#OTPStepThree");
          if (eStepThree.classList.contains("hidden")) {
            eStepTwo.classList.add("hidden");
            eStepThree.classList.remove("hidden");
            eStepThree.classList.add("block");
          }
        },

        goToStepFourFromThree() {
          const eStepThree = document.querySelector("#OTPStepThree");
          const eStepFour = document.querySelector("#OTPStepFour");
          if (eStepFour.classList.contains("hidden")) {
            eStepThree.classList.add("hidden");
            eStepFour.classList.remove("hidden");
            eStepFour.classList.add("block");
          }
        },

        backToStepOneFromTwo() {
          const eStepOne = document.querySelector("#OTPStepOne");
          const eStepTwo = document.querySelector("#OTPStepTwo");
          if (eStepOne.classList.contains("hidden")) {
            eStepTwo.classList.add("hidden");
            eStepOne.classList.remove("hidden");
            eStepOne.classList.add("block");
          }
        },

        backToStepTwoFromThree() {
          const eStepTwo = document.querySelector("#OTPStepTwo");
          const eStepThree = document.querySelector("#OTPStepThree");
          if (eStepTwo.classList.contains("hidden")) {
            eStepThree.classList.add("hidden");
            eStepTwo.classList.remove("hidden");
            eStepTwo.classList.add("block");
          }
        }
      }
    });

    OTPLoginApp.mount("#OTPLoginApp");

  }

  const clickEvent = (first, last) => {
    if (first.value.length) {
      document.getElementById(last).focus();
    }
  }

  function restrictKey(evt) {
    var theEvent = evt || window.event;

    if (theEvent.type === "paste") {
      key = event.clipboardData.getData("text/plain");
    } else {
      var key = theEvent.keyCode || theEvent.which;
      key = String.fromCharCode(key);
    }

    var regex = /^[\d ()+-]+$/;

    if (! regex.test(key)) {
      theEvent.returnValue = false;
      if (theEvent.preventDefault) {
        theEvent.preventDefault();
      }
    }
  }
</script>