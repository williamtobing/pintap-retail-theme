{{ 'customer.css' | asset_url | stylesheet_tag }}
{{ 'login-customer.css' | asset_url | stylesheet_tag }}

<div class="customer login otp-login-app" id="OTPLoginApp">
  {% section 'login-step-one' %}
  {% section 'login-step-reset-one' %}
  {% section 'login-step-reset-two' %}
  {% section 'login-step-reset-three' %}
  {% section 'login-step-reset-four' %}
  {% section 'login-step-four' %}
</div>

<script>
  if (document.querySelector("#OTPLoginApp")) {
    const OTPLoginApp = Vue.createApp({
      delimiters: [
        "${", "}"
      ],
      data() {
        return {
          URL: "https://api.mretail.pintap.id",

          phone: null,
          email: null,
          password: null,

          resetPassword: null,
          resetPasswordConfirm: null,

          numOne: null,
          numTwo: null,
          numThree: null,
          numFour: null,
          numFive: null,
          numSix: null,

          mismatchAuth: false,
          mismatchPass: false,
          matchPass: false,
          loading: false,

          typeOTP: "",
          successOTP: false,
          failOTP: false,

          checkCustomer: false,
          resetPswText: false,
          reset404: false
        };
      },

      watch: {
        phone() {
          this.mismatchAuth = false;
        },
        password() {
          this.mismatchAuth = false;
        }
      },

      methods: {
        handleAuth() {
          if (this.phone.startsWith("0")) {
            this.phone = this.phone.replace("0", "+62");
          }

          axios
            .get(`${
              this.URL
            }/api/v1/profile/email?phone=${
              this.phone
            }`)
            .then((res) => {
              if (res.data.code === 404) {
                this.checkCustomer = true;
                this.phone = null;
                this.password = null;
              }

              if (res.data.code === 12) {
                this.goToStepResetOneFromOne();
              }

              if (res.data.code === 52) {
                window.location = res
                  .data
                  .data
                  .account_activation_url;
              }

              if (res.data.code === 0) {
                this.email = res
                  .data
                  .data
                  .email;

                axios
                  .post(`${
                    this.URL
                  }/OAuth/token`, {
                    phone: this.phone,
                    password: this.password
                  })
                  .then((res) => {
                    if (res.data.code === 404) {
                      this.mismatchAuth = true;
                    }

                    if (res.data.code === 0 && res.data.message === `Unidentified customer`) {
                      this.mismatchAuth = true;
                    }

                    if (
                      res.data.code === 0 &&
                      res.data.message === `shopify error undefined`
                    ) {
                      alert(res.data.message);
                    }

                    if (res.data.code === 0 && res.data.message === "") {
                      this.goToStepFourFromOne();
                    }
                  })
                  .catch((err) => {
                    console.log(err);
                  });
              }
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handlePhone() {
          if (this.phone.startsWith("0")) {
            this.phone = this.phone.replace("0", "+62");
          }

          axios
            .get(`${
              this.URL
            }/api/v1/profile/email?phone=${
              this.phone
            }`)
            .then((res) => {
              if (res.data.code === 404) {
                this.reset404 = true;
                this.phone = null;
              }

              if (res.data.code === 12) {
                this.goToStepResetTwoFromResetOne();
              }

              if (res.data.code === 52) {
                window.location = res
                  .data
                  .data
                  .account_activation_url;
              }

              if (res.data.code === 0) {
                this.goToStepResetTwoFromResetOne();
              }
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleReqOtp(type) {
          console.log("Function request " + type + " OTP");
          this.typeOTP = type;

          if (this.phone.startsWith("0")) {
            this.phone = this.phone.replace("0", "+62");
          }

          axios
            .post(`${
              this.URL
            }/api/v1/forgot/otp`, {
              phone: this.phone,
              channel: type
            })
            .then((res) => {
              if (res.data.code === 0) {
                this.goToStepResetThreeFromResetTwo();
              }
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleRegisterConfirmOtp() {
          const joinNum = [
            this.numOne,
            this.numTwo,
            this.numThree,
            this.numFour,
            this.numFive,
            this.numSix
          ].join("");

          axios
            .post(`${
              this.URL
            }/api/v1/forgot/confirm`, {
              phone: this.phone,
              otp: joinNum
            })
            .then((res) => {
              if (res.data.code === 401) {
                this.failOTP = true;
              }

              if (res.data.code === 0) {
                localStorage.setItem("reset_token", res
                  .data
                  .data
                  .token);

                this.failOTP = false;
                this.successOTP = true;

                this.goToStepResetFourFromResetThree();
              }
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleResetPassword() {
          if (this.resetPassword !== this.resetPasswordConfirm) {
            this.mismatchPass = true;
          } else {
            this.mismatchPass = false;

            axios
              .post(`${
                this.URL
              }/api/v1/forgot/pass/change`, {
                password: this.resetPassword,
                confirm_password: this.resetPasswordConfirm
              }, {
                headers: {
                  Authorization: `Bearer ${
                    localStorage.getItem("reset_token")
                  }`,
                  "Content-Type": "application/json"
                }
              })
              .then((res) => {
                if (res.data.code === 0) {
                  this.matchPass = true;

                  window.location = `${
                    window.location.origin
                  }/account/login`;
                }
              })
              .catch((err) => {
                console.log(err);
              });
          }
        },

        goToStepFourFromOne() {
          window.scrollTo(0, 0);
          const eStepOne = document.querySelector("#OTPStepOne");
          const eStepFour = document.querySelector("#OTPStepFour");
          if (eStepFour.classList.contains("hidden")) {
            eStepOne.classList.add("hidden");
            eStepFour.classList.remove("hidden");
            eStepFour.classList.add("block");
          }
        },

        goToStepResetOneFromOne() {
          window.scrollTo(0, 0);
          const eStepOne = document.querySelector("#OTPStepOne");
          const eStepResetOne = document.querySelector("#OTPStepResetOne");
          if (eStepResetOne.classList.contains("hidden")) {
            eStepOne.classList.add("hidden");
            eStepResetOne.classList.remove("hidden");
            eStepResetOne.classList.add("block");
          }
        },

        goToStepForgetOneFromOne() {
          window.scrollTo(0, 0);
          this.phone = null;
          this.resetPswText = true;
          const eStepOne = document.querySelector("#OTPStepOne");
          const eStepResetOne = document.querySelector("#OTPStepResetOne");
          if (eStepResetOne.classList.contains("hidden")) {
            eStepOne.classList.add("hidden");
            eStepResetOne.classList.remove("hidden");
            eStepResetOne.classList.add("block");
          }
        },

        goToStepResetTwoFromResetOne() {
          window.scrollTo(0, 0);
          const eStepResetOne = document.querySelector("#OTPStepResetOne");
          const eStepResetTwo = document.querySelector("#OTPStepResetTwo");
          if (eStepResetTwo.classList.contains("hidden")) {
            eStepResetOne.classList.add("hidden");
            eStepResetTwo.classList.remove("hidden");
            eStepResetTwo.classList.add("block");
          }
        },

        goToStepResetThreeFromResetTwo() {
          window.scrollTo(0, 0);
          const eStepResetTwo = document.querySelector("#OTPStepResetTwo");
          const eStepResetThree = document.querySelector("#OTPStepResetThree");
          if (eStepResetThree.classList.contains("hidden")) {
            eStepResetTwo.classList.add("hidden");
            eStepResetThree.classList.remove("hidden");
            eStepResetThree.classList.add("block");
          }
        },

        goToStepResetFourFromResetThree() {
          window.scrollTo(0, 0);
          const eStepResetThree = document.querySelector("#OTPStepResetThree");
          const eStepResetFour = document.querySelector("#OTPStepResetFour");
          if (eStepResetFour.classList.contains("hidden")) {
            eStepResetThree.classList.add("hidden");
            eStepResetFour.classList.remove("hidden");
            eStepResetFour.classList.add("block");
          }
        },

        goToStepPswFromOne() {
          window.scrollTo(0, 0);
          const eStepOne = document.querySelector("#OTPStepOne");
          const eStepPsw = document.querySelector("#OTPStepPsw");
          if (eStepPsw.classList.contains("hidden")) {
            eStepOne.classList.add("hidden");
            eStepPsw.classList.remove("hidden");
            eStepPsw.classList.add("block");
          }
        },

        backToStepOneFromPsw() {
          window.scrollTo(0, 0);
          const eStepOne = document.querySelector("#OTPStepOne");
          const eStepPsw = document.querySelector("#OTPStepPsw");
          if (eStepOne.classList.contains("hidden")) {
            eStepPsw.classList.add("hidden");
            eStepOne.classList.remove("hidden");
            eStepOne.classList.add("block");
          }
        },

        backToStepOneFromResetOne() {
          window.scrollTo(0, 0);
          this.reset404 = false;
          const eStepOne = document.querySelector("#OTPStepOne");
          const eStepResetOne = document.querySelector("#OTPStepResetOne");
          if (eStepOne.classList.contains("hidden")) {
            eStepResetOne.classList.add("hidden");
            eStepOne.classList.remove("hidden");
            eStepOne.classList.add("block");
          }
        },

        backToStepResetOneFromResetTwo() {
          window.scrollTo(0, 0);
          const eStepResetOne = document.querySelector("#OTPStepResetOne");
          const eStepResetTwo = document.querySelector("#OTPStepResetTwo");
          if (eStepResetOne.classList.contains("hidden")) {
            eStepResetTwo.classList.add("hidden");
            eStepResetOne.classList.remove("hidden");
            eStepResetOne.classList.add("block");
          }
        },

        backToStepResetTwoFromResetThree() {
          window.scrollTo(0, 0);
          const eStepResetTwo = document.querySelector("#OTPStepResetTwo");
          const eStepResetThree = document.querySelector("#OTPStepResetThree");
          if (eStepResetTwo.classList.contains("hidden")) {
            eStepResetThree.classList.add("hidden");
            eStepResetTwo.classList.remove("hidden");
            eStepResetTwo.classList.add("block");
          }
        },

        backToStepResetThreeFromResetFour() {
          window.scrollTo(0, 0);
          const eStepResetThree = document.querySelector("#OTPStepResetThree");
          const eStepResetFour = document.querySelector("#OTPStepResetFour");
          if (eStepResetThree.classList.contains("hidden")) {
            eStepResetFour.classList.add("hidden");
            eStepResetThree.classList.remove("hidden");
            eStepResetThree.classList.add("block");
          }
        }
      }
    });

    OTPLoginApp.mount("#OTPLoginApp");

  }

  const clickEvent = (first, last) => {
    if (first.value.length) {
      document.getElementById(last).focus();
    }
  }

  function restrictKey(evt) {
    var theEvent = evt || window.event;

    if (theEvent.type === "paste") {
      key = event.clipboardData.getData("text/plain");
    } else {
      var key = theEvent.keyCode || theEvent.which;
      key = String.fromCharCode(key);
    }

    var regex = /^[\d ()+-]+$/;

    if (! regex.test(key)) {
      theEvent.returnValue = false;
      if (theEvent.preventDefault) {
        theEvent.preventDefault();
      }
    }
  }
</script>