{{ 'customer.css' | asset_url | stylesheet_tag }}
{{ 'register-customer.css' | asset_url | stylesheet_tag }}

<div
  class="customer register register-app"
  id="RegisterApp"
  style="max-width: 60rem;">
  {% section 'register-step-one' %}
  {% section 'register-step-two' %}
  {% section 'register-step-three' %}
  {% section 'register-step-four' %}
</div>

<script>
  if (document.querySelector("#RegisterApp")) {
    const RegisterApp = Vue.createApp({
      delimiters: [
        "${", "}"
      ],
      data() {
        return {
          URL: "https://dev-api-mretail.pintap.id",

          customerData: {
            fullname: null,
            phone: null,
            email: null,
            birthdate: null,
            gender: null
          },

          storeData: {
            shopName: null,
            province: null,
            city: null,
            district: null,
            subdistrict: null,
            zipcode: null,
            address: null,
            addressDetail: null,
            shopImg: null
          },

          pictURL: null,

          numOne: "",
          numTwo: "",
          numThree: "",
          numFour: "",
          numFive: "",
          numSix: "",

          customerId: "",
          customerDataFromApi: {},

          provinceApi: null,
          cityApi: null,
          districtApi: null,
          subdistrictApi: null,

          hideGenderLabel: true,
          hideProvinceLabel: true,
          hideCityLabel: true,
          hideDistrictLabel: true,
          hideSubdistrictLabel: true
        };
      },

      created() {
        axios
          .get(`${
            this.URL
          }/api/v1/region/province`)
          .then((res) => {
            this.provinceApi = res
              .data
              .data
              .sort((a, b) => a.name.localeCompare(b.name));
          })
          .catch((err) => {
            console.log(err);
          });
      },

      methods: {
        handleProvince() {
          axios
            .get(`${
              this.URL
            }/api/v1/region/city/${
              this.storeData.province
            }`)
            .then((res) => {
              this.cityApi = res
                .data
                .data
                .sort((a, b) => a.name.localeCompare(b.name));

              this.storeData.city = null;
              this.storeData.district = null;
              this.storeData.subdistrict = null;
              this.hideProvinceLabel = false;
              this.hideCityLabel = true;
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleCity() {
          axios
            .get(`${
              this.URL
            }/api/v1/region/district/${
              this.storeData.city
            }`)
            .then((res) => {
              this.districtApi = res
                .data
                .data
                .sort((a, b) => a.name.localeCompare(b.name));

              this.storeData.district = null;
              this.storeData.subdistrict = null;
              this.hideCityLabel = false;
              this.hideDistrictLabel = true;
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleDistrict() {
          axios
            .get(`${
              this.URL
            }/api/v1/region/subdistrict/${
              this.storeData.district
            }`)
            .then((res) => {
              this.subdistrictApi = res
                .data
                .data
                .sort((a, b) => a.name.localeCompare(b.name));

              this.storeData.subdistrict = null;
              this.hideDistrictLabel = false;
              this.hideSubdistrictLabel = true;
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleTempDataCustomer() {
          if (this.customerData.phone === null) {
            const el = document.querySelector("div#RegisterStepOne input[name='phone']");
            el.focus();
          } else {
            if (this
                .customerData
                .phone
                .startsWith("0")) {
              this.customerData.phone = this
                .customerData
                .phone
                .replace("0", "+62");
              console.log("Step One, Convert Phone Number and Saved.");
            } else {
              console.log("Step One Saved.");
            }

            this.goToStepTwoFromOne();
          }
        },

        handleReqOtp(type) {
          console.log("reqOTP", type);
          let phone = this.customerData.phone;

          if (phone.startsWith("0")) {
            phone = phone.replace("0", "+62");
          }

          axios
            .post(`${
              this.URL
            }/api/v1/auth/otp/send`, {
              phone: phone,
              channel: type
            })
            .then((res) => {
              console.log(res.data.message);
            })
            .catch((err) => {
              console.log(err);
            });
        },

        handleRegisterConfirmOtp() {
          const joinNum = [
            this.numOne,
            this.numTwo,
            this.numThree,
            this.numFour,
            this.numFive,
            this.numSix
          ].join("");

          axios
            .post(`${
              this.URL
            }/api/v1/auth/register`, {
              name: this.customerData.fullname,
              phone: this.customerData.phone,
              email: this.customerData.email,
              birthdate: this.customerData.birthdate,
              gender: this.customerData.gender
            })
            .then((res) => {
              console.log(res.data.message);
              this.customerId = res
                .data
                .data
                .id;

              axios
                .post(`${
                  this.URL
                }/api/v1/auth/otp/confirm`, {
                  phone: this.customerData.phone,
                  otp: joinNum
                })
                .then((res) => {
                  console.log(res
                    .data
                    .data
                    .customer_token);

                  localStorage.setItem("token", res
                    .data
                    .data
                    .customer_token);

                  alert("OTP Confirmed and Registered.");
                  this.getCustomerById();
                  this.goToStepFourFromThree();
                })
                .catch((err) => {
                  alert("Wrong OTP!");
                  console.log(err);
                });
            })
            .catch((err) => {
              alert("Something Wrong!");
              console.log(err);
            });
        },

        handleRegisterStore(e) {
          let formData = new FormData();
          formData.append("shop_name", this.storeData.shopName);
          formData.append("province", this.storeData.province);
          formData.append("city", this.storeData.city);
          formData.append("district", this.storeData.district);
          formData.append("subdistrict", this.storeData.subdistrict);
          formData.append("zipcode", this.storeData.zipcode);
          formData.append("address", this.storeData.address);
          formData.append("address_detail", this.storeData.addressDetail);
          formData.append("file", this.storeData.shopImg);

          for (const pair of formData.entries()) {
            console.log(pair[0] + ": " + pair[1]);
          }
        },

        setPicture(e) {
          this.storeData.shopImg = e.target.files[0];
          this.pictURL = URL.createObjectURL(this.storeData.shopImg);
        },
        /* END OF HANDLE REGION */

        // TO BE DELETE SOON
        getCustomerById() {
          axios
            .get(`${
              this.URL
            }/api/v1/profile/info/${
              this.customerId
            }`)
            .then((res) => {
              console.log(res.data.message);
              this.customerDataFromApi = res.data.data;
            })
            .catch((err) => {
              console.log(err);
            });
        },

        goToStepTwoFromOne() {
          const eStepOne = document.querySelector("#RegisterStepOne");
          const eStepTwo = document.querySelector("#RegisterStepTwo");
          if (eStepTwo.classList.contains("hidden")) {
            eStepOne.classList.add("hidden");
            eStepTwo.classList.remove("hidden");
            eStepTwo.classList.add("block");
          }
        },

        goToStepThreeFromTwo() {
          const eStepTwo = document.querySelector("#RegisterStepTwo");
          const eStepThree = document.querySelector("#RegisterStepThree");
          if (eStepThree.classList.contains("hidden")) {
            eStepTwo.classList.add("hidden");
            eStepThree.classList.remove("hidden");
            eStepThree.classList.add("block");
          }
        },

        goToStepFourFromThree() {
          const eStepThree = document.querySelector("#RegisterStepThree");
          const eStepFour = document.querySelector("#RegisterStepFour");
          if (eStepFour.classList.contains("hidden")) {
            eStepThree.classList.add("hidden");
            eStepFour.classList.remove("hidden");
            eStepFour.classList.add("block");
          }
        },

        backToStepOneFromTwo() {
          const eStepOne = document.querySelector("#RegisterStepOne");
          const eStepTwo = document.querySelector("#RegisterStepTwo");
          if (eStepOne.classList.contains("hidden")) {
            eStepTwo.classList.add("hidden");
            eStepOne.classList.remove("hidden");
            eStepOne.classList.add("block");
          }
        },

        backToStepTwoFromThree() {
          const eStepTwo = document.querySelector("#RegisterStepTwo");
          const eStepThree = document.querySelector("#RegisterStepThree");
          if (eStepTwo.classList.contains("hidden")) {
            eStepThree.classList.add("hidden");
            eStepTwo.classList.remove("hidden");
            eStepTwo.classList.add("block");
          }
        },

        backToStepThreeFromFour() {
          const eStepThree = document.querySelector("#RegisterStepThree");
          const eStepFour = document.querySelector("#RegisterStepFour");
          if (eStepThree.classList.contains("hidden")) {
            eStepFour.classList.add("hidden");
            eStepThree.classList.remove("hidden");
            eStepThree.classList.add("block");
          }
        }
        /* END OF MOVE STEP REGION */
      }
    });

    RegisterApp.mount("#RegisterApp");

  }

  const clickEvent = (first, last) => {
    if (first.value.length) {
      document.getElementById(last).focus();
    }
  }

  function restrictKey(evt) {
    var theEvent = evt || window.event;

    if (theEvent.type === "paste") {
      key = event.clipboardData.getData("text/plain");
    } else {
      var key = theEvent.keyCode || theEvent.which;
      key = String.fromCharCode(key);
    }

    var regex = /^[\d ()+-]+$/;

    if (! regex.test(key)) {
      theEvent.returnValue = false;
      if (theEvent.preventDefault) {
        theEvent.preventDefault();
      }
    }
  }
</script>